{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krishan kant\\\\Desktop\\\\Js\\\\chess\\\\frontend\\\\src\\\\components\\\\Board.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boardStyle = {\n  display: 'grid',\n  gridTemplateColumns: 'repeat(3, 80px)',\n  gridTemplateRows: 'repeat(3, 80px)',\n  gap: 10,\n  marginTop: 20,\n  userSelect: 'none'\n};\nconst cellBaseStyle = {\n  backgroundColor: '#22272e',\n  borderRadius: 16,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: 48,\n  fontWeight: 'bold',\n  color: '#555',\n  cursor: 'pointer',\n  boxShadow: '0 0 5px #000 inset',\n  transition: 'all 0.3s ease'\n};\nconst glowingColors = {\n  X: '#00b0ff',\n  // bright blue\n  O: '#ff4081' // bright pink\n};\nfunction Board({\n  board,\n  onCellClick,\n  playerSymbol,\n  winningLine = []\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: boardStyle,\n    children: board.map((cell, idx) => {\n      const isWinningCell = winningLine.includes(idx);\n      const glowColor = glowingColors[cell] || 'transparent';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => onCellClick(idx),\n        style: {\n          ...cellBaseStyle,\n          color: cell ? glowColor : '#555',\n          cursor: cell ? 'default' : 'pointer',\n          //   boxShadow: isWinningCell\n          //     ? `0 0 20px ${glowColor}, 0 0 40px ${glowColor}`\n          //     : '0 0 5px #000 inset',\n          transform: isWinningCell ? 'scale(1.1)' : 'scale(1)'\n        },\n        children: cell\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","boardStyle","display","gridTemplateColumns","gridTemplateRows","gap","marginTop","userSelect","cellBaseStyle","backgroundColor","borderRadius","justifyContent","alignItems","fontSize","fontWeight","color","cursor","boxShadow","transition","glowingColors","X","O","Board","board","onCellClick","playerSymbol","winningLine","style","children","map","cell","idx","isWinningCell","includes","glowColor","onClick","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/krishan kant/Desktop/Js/chess/frontend/src/components/Board.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst boardStyle = {\r\n  display: 'grid',\r\n  gridTemplateColumns: 'repeat(3, 80px)',\r\n  gridTemplateRows: 'repeat(3, 80px)',\r\n  gap: 10,\r\n  marginTop: 20,\r\n  userSelect: 'none',\r\n};\r\n\r\nconst cellBaseStyle = {\r\n  backgroundColor: '#22272e',\r\n  borderRadius: 16,\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  fontSize: 48,\r\n  fontWeight: 'bold',\r\n  color: '#555',\r\n  cursor: 'pointer',\r\n  boxShadow: '0 0 5px #000 inset',\r\n  transition: 'all 0.3s ease',\r\n};\r\n\r\nconst glowingColors = {\r\n  X: '#00b0ff',  // bright blue\r\n  O: '#ff4081',  // bright pink\r\n};\r\n\r\nfunction Board({ board, onCellClick, playerSymbol, winningLine = [] }) {\r\n  return (\r\n    <div style={boardStyle}>\r\n      {board.map((cell, idx) => {\r\n        const isWinningCell = winningLine.includes(idx);\r\n        const glowColor = glowingColors[cell] || 'transparent';\r\n\r\n        return (\r\n          <div\r\n            key={idx}\r\n            onClick={() => onCellClick(idx)}\r\n            style={{\r\n              ...cellBaseStyle,\r\n              color: cell ? glowColor : '#555',\r\n              cursor: cell ? 'default' : 'pointer',\r\n            //   boxShadow: isWinningCell\r\n            //     ? `0 0 20px ${glowColor}, 0 0 40px ${glowColor}`\r\n            //     : '0 0 5px #000 inset',\r\n              transform: isWinningCell ? 'scale(1.1)' : 'scale(1)',\r\n            }}\r\n          >\r\n            {cell}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAG;EACjBC,OAAO,EAAE,MAAM;EACfC,mBAAmB,EAAE,iBAAiB;EACtCC,gBAAgB,EAAE,iBAAiB;EACnCC,GAAG,EAAE,EAAE;EACPC,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBC,eAAe,EAAE,SAAS;EAC1BC,YAAY,EAAE,EAAE;EAChBR,OAAO,EAAE,MAAM;EACfS,cAAc,EAAE,QAAQ;EACxBC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE,MAAM;EAClBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,SAAS;EACjBC,SAAS,EAAE,oBAAoB;EAC/BC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBC,CAAC,EAAE,SAAS;EAAG;EACfC,CAAC,EAAE,SAAS,CAAG;AACjB,CAAC;AAED,SAASC,KAAKA,CAAC;EAAEC,KAAK;EAAEC,WAAW;EAAEC,YAAY;EAAEC,WAAW,GAAG;AAAG,CAAC,EAAE;EACrE,oBACE1B,OAAA;IAAK2B,KAAK,EAAE1B,UAAW;IAAA2B,QAAA,EACpBL,KAAK,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;MACxB,MAAMC,aAAa,GAAGN,WAAW,CAACO,QAAQ,CAACF,GAAG,CAAC;MAC/C,MAAMG,SAAS,GAAGf,aAAa,CAACW,IAAI,CAAC,IAAI,aAAa;MAEtD,oBACE9B,OAAA;QAEEmC,OAAO,EAAEA,CAAA,KAAMX,WAAW,CAACO,GAAG,CAAE;QAChCJ,KAAK,EAAE;UACL,GAAGnB,aAAa;UAChBO,KAAK,EAAEe,IAAI,GAAGI,SAAS,GAAG,MAAM;UAChClB,MAAM,EAAEc,IAAI,GAAG,SAAS,GAAG,SAAS;UACtC;UACA;UACA;UACEM,SAAS,EAAEJ,aAAa,GAAG,YAAY,GAAG;QAC5C,CAAE;QAAAJ,QAAA,EAEDE;MAAI,GAZAC,GAAG;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAaL,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GA3BQnB,KAAK;AA6Bd,eAAeA,KAAK;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}